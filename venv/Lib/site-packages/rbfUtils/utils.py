# -*- coding: utf-8 -*-

#  Copyright 2019-  DNB
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

from cryptography.fernet import Fernet
import importlib
from robot.api import logger
from robot.api.deco import keyword



class Utilities(object):
    """
    Utilities provide various keywords to the rbfUtil library
    """

    def __init__(self):
        """
        Initializes _dbconnection to None.
        """
        self.key = None

    
    @keyword
    def encrypt(self, input_file, output_file, write_key_to_location=None):
        """
        *Encrypts data from input file and writes output to a new file by generating a key.*
        
        *Arguments*

        ``input_file``: Location of text file with content (plan-text) to be encrypted
        
        ``output_file``: Location of text file with content (encrypted) to be written to
		
        ``write_key_to_location``: Location of key generated to be written to
        
        *Examples*
              
        | `Encrypt` | input_file=${CURDIR}/input.txt | output_file=${CURDIR}/output.txt |

        """
        if self.key is None:
            self.key = Fernet.generate_key()
            logger.info('Key doesnot exist, generating a new key')
            if write_key_to_location:
                with open(write_key_to_location, 'wb') as f:
                    f.write(self.key)
                    f.close()
                    logger.info('Generated key written at %s' % (write_key_to_location))
        
        with open(input_file, 'rb') as f:
            data = f.read()
            f.close()
        
        fernet = Fernet(self.key)
        encrypted = fernet.encrypt(data)

        with open(output_file, 'wb') as f:
            f.write(encrypted)
            f.close()
        
        logger.info('Encrypted Data')

    
    @keyword
    def decrypt(self, input_file, output_file, key=None):
        """
        *Decrypts data from input file and writes output to a new file by generating a key.*
        
        *Arguments*

        ``input_file``: Location of file with content (encrypted)
        
        ``output_file``: Location of text file with content (decrypted) to be written to
		
		``key``: Optional. If provided, uses the key for decryption. Overrides the key generated by `Encrypt` keyword. 
		
        
        *Examples*
              
        | `Decrypt` | input_file=${CURDIR}/input.txt | output_file=${CURDIR}/output.txt |

        """
        if key:
            file = open(key, 'rb')
            self.key = file.read()
            file.close()
            fernet = Fernet(self.key)
            logger.info('Reading and Applying the key provided')

        if self.key is None:
            raise ValueError('Key doesnot exist, cannot decrypt')

        if key is None:
            fernet = Fernet(self.key)		
            logger.info('Applying the existing key generated by Encrypt')

        with open(input_file, 'rb') as f:
            data = f.read()
            f.close()
        

        decrypted = fernet.decrypt(data)

        with open(output_file, 'wb') as f:
            f.write(decrypted)
            f.close()
        
        logger.info('Decrypted Data')